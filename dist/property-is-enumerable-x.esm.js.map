{"version":3,"sources":["../src/property-is-enumerable-x.js"],"names":[],"mappings":"AAAA,OAAO,aAAP,MAA0B,mBAA1B;AACA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,SAAP,MAAsB,oBAAtB;AAEA,IAAM,gBAAgB,GAAG,SAAS,CAAC,GAAG,oBAAJ,CAAlC;AAEA;;;;;;;;;;;;AAWA,IAAM,oBAAoB,GAAG,SAAS,oBAAT,CAA8B,MAA9B,EAAsC,QAAtC,EAAgD;AAC3E,SAAO,gBAAgB,CAAC,QAAQ,CAAC,MAAD,CAAT,EAAmB,aAAa,CAAC,QAAD,CAAhC,CAAvB;AACD,CAFD;;AAIA,eAAe,oBAAf","file":"property-is-enumerable-x.esm.js","sourcesContent":["import toPropertyKey from 'to-property-key-x';\nimport toObject from 'to-object-x';\nimport methodize from 'simple-methodize-x';\n\nconst propIsEnumerable = methodize({}.propertyIsEnumerable);\n\n/**\n * This method returns a Boolean indicating whether the specified property is\n * enumerable. Does not attempt to fix bugs in IE<9 or old Opera, otherwise it\n * does ES6ify the method.\n *\n * @param {!object} object - The object on which to test the property.\n * @param {string|symbol} property - The name of the property to test.\n * @throws {TypeError} If target is null or undefined.\n * @returns {boolean} A Boolean indicating whether the specified property is\n *  enumerable.\n */\nconst propertyIsEnumerable = function propertyIsEnumerable(object, property) {\n  return propIsEnumerable(toObject(object), toPropertyKey(property));\n};\n\nexport default propertyIsEnumerable;\n"]}